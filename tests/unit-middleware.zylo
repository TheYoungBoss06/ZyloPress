// Unit tests for middlewares
import { auth } from '../zylopress/middleware.zylo';
import { sign } from '../zylopress/security/jwt.zylo';

// Mock request/response
const createMockReq = (token) => ({
  headers: { authorization: token ? `Bearer ${token}` : undefined }
});

const createMockRes = () => {
  const res = {};
  res.status = (code) => { res.statusCode = code; return res; };
  res.json = (obj) => { res.body = obj; };
  return res;
};

const testAuthMiddleware = async () => {
  console.log('Testing auth middleware...');

  // Test without token
  const req1 = createMockReq();
  const res1 = createMockRes();
  let nextCalled = false;
  const next = () => { nextCalled = true; };

  await auth()(req1, res1, next);
  if (res1.statusCode === 401 && !nextCalled) {
    console.log('✓ Auth without token fails');
  } else {
    console.log('✗ Auth without token should fail');
  }

  // Test with valid token
  const token = sign({ id: 1, role: 'user' });
  const req2 = createMockReq(token);
  const res2 = createMockRes();
  nextCalled = false;

  await auth()(req2, res2, next);
  if (nextCalled && req2.user.id === 1) {
    console.log('✓ Auth with valid token passes');
  } else {
    console.log('✗ Auth with valid token should pass');
  }

  // Test with invalid role
  const req3 = createMockReq(token);
  const res3 = createMockRes();
  nextCalled = false;

  await auth(['admin'])(req3, res3, next);
  if (res3.statusCode === 403 && !nextCalled) {
    console.log('✓ Auth with insufficient role fails');
  } else {
    console.log('✗ Auth with insufficient role should fail');
  }
};

testAuthMiddleware();